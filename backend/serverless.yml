service:
  name: serverless-todo-app

plugins:
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  
  environment:
    SERVERLESS_TODO_TABLE: Udacity-Serverless-Todo-${self:provider.stage}
    IMAGES_S3_BUCKET: Udacity-Serverless-Todo-umair-${self:provider.stage}
    URL_EXPIRATION: 3000
  
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udacity-Serverless-Todo-API
        description: Udacity-Serverless-Todo-API
    models:
      - name: RequestCreateTodo
        contentType: application/json
        schema: ${file(Models_Validators/Request-Create-Todo.json)}
      - name: RequestUpdateTodo
        contentType: application/json
        schema: ${file(Models_Validators/Request-Update-Todo.json)}


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatementsName: serverless-role-get-todo
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb: Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVERLESS_TODO_TABLE}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          reqValidatorName: myReqValidator
          documentation:
            summary: Create todo item
            description: create todo item
            requestModels:
              'application/json': RequestCreateTodo
    iamRoleStatements: serverless-role-create-todo
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb: PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVERLESS_TODO_TABLE}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: myReqValidator
          documentation:
            summary: todo item update
            description: todo item update
            requestModels:
              'application/json': RequestUpdateTodo
    iamRoleStatementsName: serverless-role-update-todo
    iamROleStatements:
      - Effect: Allow
        Action:
          - dynamodb: UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVERLESS_TODO_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-role-delete-todo
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb: DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVERLESS_TODO_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-role-generate-upload-url
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3: PutObject
          - s3: GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*

resources:
  Resources:
    BucketAttachments:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - DELETE
                - PUT
                - POST
    myReqValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'my-req-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false
    DynamoDbTodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: RANGE
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SERVERLESS_TODO_TABLE}